{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Win10\\\\Documents\\\\udemi-react\\\\14-react-portfolio-api\\\\src\\\\components\\\\Database\\\\FactorySearch.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { fetchFactoryForDatabase } from \"../../lib/api\";\nimport FactoryItem from \"./FactoryItem\";\nimport styles from \"./FactorySearch.module.css\";\nimport ViewFactory from \"./ViewFactory\";\nimport FactorySearchForm from \"./FactorySearchForm\";\n\nconst sortList = (items, descending, sortType) => {\n  return items.sort((itemA, itemB) => {\n    if (sortType) {\n      if (descending) {\n        return itemA.Name < itemB.Name ? 1 : -1;\n      } else {\n        return itemA.Name > itemB.Name ? 1 : -1;\n      }\n    } else {\n      if (descending) {\n        return itemA.City < itemB.City ? 1 : -1;\n      } else {\n        return itemA.City > itemB.City ? 1 : -1;\n      }\n    }\n  });\n};\n\nconst FactorySearch = () => {\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [activateSearch, setActivateSearch] = useState(false);\n  const history = useHistory();\n  const [getEquipmentType, setGetEquipmentType] = useState(\"\");\n  const [getReportType, setGetReportType] = useState(\"\");\n  const [getYear, setGetYear] = useState(\"\");\n  const [specificCountryList, setSpecificCountryList] = useState([]);\n  const {\n    sendRequest,\n    status,\n    data,\n    error\n  } = useHttp(fetchFactoryForDatabase); //////////////// first-selection //////////////////////\n\n  const getEquipmentTypeHandler = e => {\n    e.preventDefault();\n    setGetEquipmentType(e.target.value);\n  };\n\n  const getReportTypeHandler = e => {\n    e.preventDefault();\n    setGetReportType(e.target.value);\n  };\n\n  const getYearHandler = e => {\n    e.preventDefault();\n    setGetYear(e.target.value);\n  };\n\n  const formSubmitted = getEquipmentType.length > 0 && getReportType.length > 0 && getYear.length > 0;\n\n  const submitFactoryHandler = e => {\n    e.preventDefault();\n    sendRequest({\n      equipmentType: getEquipmentType,\n      reportType: getReportType,\n      year: getYear\n    });\n    setSpecificCountryList([]);\n  }; //////////////// END-first-selection //////////////////////\n  //////////////// second-selection //////////////////////\n\n\n  let showFactoryByCountry = [];\n\n  const specificCountryHandler = e => {\n    let selectedCountry = e.target.value;\n    setActivateSearch(false); // history.push(`database?country=${selectedCountry}`);\n\n    showFactoryByCountry = data.Results.filter(datacountry => {\n      var _datacountry$Country;\n\n      if (((_datacountry$Country = datacountry.Country) === null || _datacountry$Country === void 0 ? void 0 : _datacountry$Country.toLowerCase()) === selectedCountry) {\n        showFactoryByCountry.push(datacountry);\n        setSpecificCountryList(showFactoryByCountry);\n        setActivateSearch(true);\n      }\n\n      if (selectedCountry === \"all\") {\n        setSpecificCountryList(data.Results);\n        setActivateSearch(true);\n      }\n\n      return null;\n    });\n  };\n\n  let mapCountries = data === null || data === void 0 ? void 0 : data.Results.map(data => {\n    var _data$Country;\n\n    return (_data$Country = data.Country) === null || _data$Country === void 0 ? void 0 : _data$Country.toLowerCase();\n  });\n  let uniqueCountriesList = [...new Set(mapCountries)];\n  let sortuniqueCountriesList = uniqueCountriesList.sort((a, b) => {\n    return a < b ? -1 : 1;\n  });\n  let optionMapList = sortuniqueCountriesList.map(country => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      value: country,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 12\n      }\n    }, country);\n  }); // console.log(specificCountryList);\n  //////////////// END-second-selection //////////////////////\n  //////////////// sorting-selection //////////////////////\n\n  const [isNameSort, setIsNameSort] = useState(true);\n\n  const sortTypeHandler = e => {\n    if (e.target.htmlFor === \"name-sort\") {\n      setIsNameSort(true);\n    }\n\n    if (e.target.htmlFor === \"city-sort\") {\n      setIsNameSort(false);\n    }\n  };\n\n  const location = useLocation();\n  const querParams = new URLSearchParams(location.search);\n  const isSortingAscending = querParams.get(\"sort\") === \"desc\";\n  const sortedList = sortList(specificCountryList, isSortingAscending, isNameSort);\n\n  const changeSortingHandler = () => {\n    history.push(\"database?sort=\" + (isSortingAscending ? \"asc\" : \"desc\"));\n  }; //////////////// END-sorting-selection //////////////////////\n  //////////////// factory-modal //////////////////////\n\n\n  const [showViewFactory, setShowViewFactory] = useState(false);\n  const [dataToViewFactory, setDataToViewFactory] = useState([]);\n\n  const closeViewFactoryHandler = () => {\n    setShowViewFactory(false);\n  };\n\n  const openViewFactoryHandler = () => {\n    setShowViewFactory(true);\n  };\n\n  const dataViewFactoryHandler = data => {\n    setDataToViewFactory(data);\n  }; //////////////// END-factory-modal //////////////////////\n  ///////////// final-third ///////////////////\n\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }\n  }, \"No data\");\n  useEffect(() => {}, [data, content, sendRequest]);\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"centered focused\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 12\n      }\n    }, error);\n  }\n\n  if (status === \"completed\" && data) {\n    // setSpecificCountryList(data.Results);\n    content = sortedList.map(data => {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"focused\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }\n      }, data.Name), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }\n      }, data.Country, \" \"), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }\n      }, data.City));\n    });\n  }\n\n  if (specificCountryList.length > 0) {\n    content = sortedList.map(data => {\n      return /*#__PURE__*/React.createElement(FactoryItem, Object.assign({\n        key: data.DOTCode,\n        Name: data.Name,\n        Country: data.Country,\n        City: data.City\n      }, data, {\n        onOpenModal: openViewFactoryHandler,\n        onViewFactory: dataViewFactoryHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }\n      }));\n    });\n  } ///////////// END-final-third ///////////////////\n  //////////////// search //////////////////\n\n\n  const searchHandler = e => {\n    setTimeout(() => {\n      setSearchInput(e.target.value);\n    }, 500);\n  };\n\n  const filteredInput = sortedList.filter(country => {\n    var _country$City;\n\n    return country.Country.toLowerCase().includes(searchInput.toLowerCase()) || ((_country$City = country.City) === null || _country$City === void 0 ? void 0 : _country$City.toLowerCase().includes(searchInput.toLowerCase())) || country.Name.toLowerCase().includes(searchInput.toLowerCase());\n  });\n\n  if (searchInput.length > 0) {\n    content = filteredInput.map(data => {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FactoryItem, Object.assign({\n        key: data.DOTCode,\n        Name: data.Name,\n        Country: data.Country,\n        City: data.City\n      }, data, {\n        onOpenModal: openViewFactoryHandler,\n        onViewFactory: dataViewFactoryHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }\n      })));\n    });\n  }\n\n  console.log(activateSearch, searchInput, filteredInput); //////////////// END-search //////////////////\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }\n  }, status), /*#__PURE__*/React.createElement(FactorySearchForm, {\n    onSubmitFactoryHandler: submitFactoryHandler,\n    onGetEquipmentTypeHandler: getEquipmentTypeHandler,\n    onGetReportTypeHandler: getReportTypeHandler,\n    getYearHandler: getYearHandler,\n    formSubmitted: formSubmitted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitFactoryHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"cars\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }\n  }, \"Choose factory:\"), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: getEquipmentTypeHandler,\n    id: \"equipment\",\n    name: \"equipment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 11\n    }\n  }, \"Select Equipment\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 11\n    }\n  }, \"Tires\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 11\n    }\n  }, \"Brake Hoses\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"13\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }, \"Glazing\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"16\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  }, \"Retread\")), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: getReportTypeHandler,\n    id: \"cars\",\n    name: \"cars\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 11\n    }\n  }, \"Select Report\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"new\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }, \"New\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"updated\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }\n  }, \"Updated\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"closed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 11\n    }\n  }, \"Closed\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 11\n    }\n  }, \"All\")), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: getYearHandler,\n    id: \"years\",\n    name: \"years\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  }, \"Select Year\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"2012\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 11\n    }\n  }, \"2012\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"2013\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 11\n    }\n  }, \"2013\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"2014\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 11\n    }\n  }, \"2014\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"2015\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 11\n    }\n  }, \"2015\")), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !formSubmitted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }\n  }, \"Get a factory\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }\n  }, \" \", data && `Amount of factories found: ${data.Count}`), data && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.checkbox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"sort\",\n    id: \"name-sort\",\n    defaultChecked: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    onClick: sortTypeHandler,\n    htmlFor: \"name-sort\",\n    className: styles[\"form-control\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }\n  }, \"Sort by Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"sort\",\n    id: \"city-sort\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    onClick: sortTypeHandler,\n    htmlFor: \"city-sort\",\n    className: styles[\"form-control\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }\n  }, \"Sort by City\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: changeSortingHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }\n  }, \"Sort \", isSortingAscending ? \"Asc...\" : \"Desc...\"), \" \"), data && /*#__PURE__*/React.createElement(\"select\", {\n    onChange: specificCountryHandler,\n    id: \"country\",\n    name: \"country\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 15\n    }\n  }, \"--Select country--\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 15\n    }\n  }, \"All countries\"), optionMapList)), data && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"search\",\n    onChange: searchHandler,\n    placeholder: \"Search a country/city/factory...\",\n    maxLength: \"15\",\n    disabled: !activateSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles[\"factory-list\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 11\n    }\n  }, content)), showViewFactory && /*#__PURE__*/React.createElement(ViewFactory, {\n    onCloseModal: closeViewFactoryHandler,\n    dataViewFactory: dataToViewFactory,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default FactorySearch;","map":{"version":3,"sources":["C:/Users/Win10/Documents/udemi-react/14-react-portfolio-api/src/components/Database/FactorySearch.js"],"names":["React","useState","useEffect","useHistory","useLocation","useHttp","fetchFactoryForDatabase","FactoryItem","styles","ViewFactory","FactorySearchForm","sortList","items","descending","sortType","sort","itemA","itemB","Name","City","FactorySearch","searchInput","setSearchInput","activateSearch","setActivateSearch","history","getEquipmentType","setGetEquipmentType","getReportType","setGetReportType","getYear","setGetYear","specificCountryList","setSpecificCountryList","sendRequest","status","data","error","getEquipmentTypeHandler","e","preventDefault","target","value","getReportTypeHandler","getYearHandler","formSubmitted","length","submitFactoryHandler","equipmentType","reportType","year","showFactoryByCountry","specificCountryHandler","selectedCountry","Results","filter","datacountry","Country","toLowerCase","push","mapCountries","map","uniqueCountriesList","Set","sortuniqueCountriesList","a","b","optionMapList","country","isNameSort","setIsNameSort","sortTypeHandler","htmlFor","location","querParams","URLSearchParams","search","isSortingAscending","get","sortedList","changeSortingHandler","showViewFactory","setShowViewFactory","dataToViewFactory","setDataToViewFactory","closeViewFactoryHandler","openViewFactoryHandler","dataViewFactoryHandler","content","DOTCode","searchHandler","setTimeout","filteredInput","includes","console","log","Count","checkbox"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport useHttp from \"../../hooks/use-http\";\r\nimport { fetchFactoryForDatabase } from \"../../lib/api\";\r\nimport FactoryItem from \"./FactoryItem\";\r\nimport styles from \"./FactorySearch.module.css\";\r\nimport ViewFactory from \"./ViewFactory\";\r\nimport FactorySearchForm from \"./FactorySearchForm\";\r\n\r\nconst sortList = (items, descending, sortType) => {\r\n  return items.sort((itemA, itemB) => {\r\n    if (sortType) {\r\n      if (descending) {\r\n        return itemA.Name < itemB.Name ? 1 : -1;\r\n      } else {\r\n        return itemA.Name > itemB.Name ? 1 : -1;\r\n      }\r\n    } else {\r\n      if (descending) {\r\n        return itemA.City < itemB.City ? 1 : -1;\r\n      } else {\r\n        return itemA.City > itemB.City ? 1 : -1;\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nconst FactorySearch = () => {\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n  const [activateSearch, setActivateSearch] = useState(false);\r\n  const history = useHistory();\r\n  const [getEquipmentType, setGetEquipmentType] = useState(\"\");\r\n  const [getReportType, setGetReportType] = useState(\"\");\r\n  const [getYear, setGetYear] = useState(\"\");\r\n  const [specificCountryList, setSpecificCountryList] = useState([]);\r\n  const { sendRequest, status, data, error } = useHttp(fetchFactoryForDatabase);\r\n\r\n  //////////////// first-selection //////////////////////\r\n  const getEquipmentTypeHandler = (e) => {\r\n    e.preventDefault();\r\n    setGetEquipmentType(e.target.value);\r\n  };\r\n  const getReportTypeHandler = (e) => {\r\n    e.preventDefault();\r\n    setGetReportType(e.target.value);\r\n  };\r\n  const getYearHandler = (e) => {\r\n    e.preventDefault();\r\n    setGetYear(e.target.value);\r\n  };\r\n\r\n  const formSubmitted =\r\n    getEquipmentType.length > 0 &&\r\n    getReportType.length > 0 &&\r\n    getYear.length > 0;\r\n\r\n  const submitFactoryHandler = (e) => {\r\n    e.preventDefault();\r\n    sendRequest({\r\n      equipmentType: getEquipmentType,\r\n      reportType: getReportType,\r\n      year: getYear,\r\n    });\r\n    setSpecificCountryList([]);\r\n  };\r\n  //////////////// END-first-selection //////////////////////\r\n\r\n  //////////////// second-selection //////////////////////\r\n  let showFactoryByCountry = [];\r\n  const specificCountryHandler = (e) => {\r\n    let selectedCountry = e.target.value;\r\n    setActivateSearch(false);\r\n    // history.push(`database?country=${selectedCountry}`);\r\n    showFactoryByCountry = data.Results.filter((datacountry) => {\r\n      if (datacountry.Country?.toLowerCase() === selectedCountry) {\r\n        showFactoryByCountry.push(datacountry);\r\n        setSpecificCountryList(showFactoryByCountry);\r\n        setActivateSearch(true);\r\n      }\r\n      if (selectedCountry === \"all\") {\r\n        setSpecificCountryList(data.Results);\r\n        setActivateSearch(true);\r\n      }\r\n      return null;\r\n    });\r\n  };\r\n\r\n  let mapCountries = data?.Results.map((data) => {\r\n    return data.Country?.toLowerCase();\r\n  });\r\n\r\n  let uniqueCountriesList = [...new Set(mapCountries)];\r\n  let sortuniqueCountriesList = uniqueCountriesList.sort((a, b) => {\r\n    return a < b ? -1 : 1;\r\n  });\r\n  let optionMapList = sortuniqueCountriesList.map((country) => {\r\n    return <option value={country}>{country}</option>;\r\n  });\r\n\r\n  // console.log(specificCountryList);\r\n  //////////////// END-second-selection //////////////////////\r\n\r\n  //////////////// sorting-selection //////////////////////\r\n  const [isNameSort, setIsNameSort] = useState(true);\r\n  const sortTypeHandler = (e) => {\r\n    if (e.target.htmlFor === \"name-sort\") {\r\n      setIsNameSort(true);\r\n    }\r\n    if (e.target.htmlFor === \"city-sort\") {\r\n      setIsNameSort(false);\r\n    }\r\n  };\r\n\r\n  const location = useLocation();\r\n  const querParams = new URLSearchParams(location.search);\r\n  const isSortingAscending = querParams.get(\"sort\") === \"desc\";\r\n  const sortedList = sortList(\r\n    specificCountryList,\r\n    isSortingAscending,\r\n    isNameSort\r\n  );\r\n\r\n  const changeSortingHandler = () => {\r\n    history.push(\"database?sort=\" + (isSortingAscending ? \"asc\" : \"desc\"));\r\n  };\r\n  //////////////// END-sorting-selection //////////////////////\r\n\r\n  //////////////// factory-modal //////////////////////\r\n  const [showViewFactory, setShowViewFactory] = useState(false);\r\n  const [dataToViewFactory, setDataToViewFactory] = useState([]);\r\n  const closeViewFactoryHandler = () => {\r\n    setShowViewFactory(false);\r\n  };\r\n  const openViewFactoryHandler = () => {\r\n    setShowViewFactory(true);\r\n  };\r\n  const dataViewFactoryHandler = (data) => {\r\n    setDataToViewFactory(data);\r\n  };\r\n  //////////////// END-factory-modal //////////////////////\r\n\r\n  ///////////// final-third ///////////////////\r\n  let content = <p>No data</p>;\r\n  useEffect(() => {}, [data, content, sendRequest]);\r\n  if (error) {\r\n    return <div className=\"centered focused\">{error}</div>;\r\n  }\r\n  if (status === \"completed\" && data) {\r\n    // setSpecificCountryList(data.Results);\r\n    content = sortedList.map((data) => {\r\n      return (\r\n        <>\r\n          <div className=\"focused\">{data.Name}</div>\r\n          <span>{data.Country} </span>\r\n          <span>{data.City}</span>\r\n        </>\r\n      );\r\n    });\r\n  }\r\n  if (specificCountryList.length > 0) {\r\n    content = sortedList.map((data) => {\r\n      return (\r\n        <FactoryItem\r\n          key={data.DOTCode}\r\n          Name={data.Name}\r\n          Country={data.Country}\r\n          City={data.City}\r\n          {...data}\r\n          onOpenModal={openViewFactoryHandler}\r\n          onViewFactory={dataViewFactoryHandler}\r\n        />\r\n      );\r\n    });\r\n  }\r\n  ///////////// END-final-third ///////////////////\r\n\r\n  //////////////// search //////////////////\r\n  const searchHandler = (e) => {\r\n    setTimeout(() => {\r\n      setSearchInput(e.target.value);\r\n    }, 500);\r\n  };\r\n  const filteredInput = sortedList.filter((country) => {\r\n    return (\r\n      country.Country.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n      country.City?.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n      country.Name.toLowerCase().includes(searchInput.toLowerCase())\r\n    );\r\n  });\r\n  if (searchInput.length > 0) {\r\n    content = filteredInput.map((data) => {\r\n      return (\r\n        <>\r\n          <FactoryItem\r\n            key={data.DOTCode}\r\n            Name={data.Name}\r\n            Country={data.Country}\r\n            City={data.City}\r\n            {...data}\r\n            onOpenModal={openViewFactoryHandler}\r\n            onViewFactory={dataViewFactoryHandler}\r\n          />\r\n        </>\r\n      );\r\n    });\r\n  }\r\n  console.log(activateSearch, searchInput, filteredInput);\r\n  //////////////// END-search //////////////////\r\n\r\n  return (\r\n    <>\r\n      <div>{status}</div>\r\n      <FactorySearchForm\r\n        onSubmitFactoryHandler={submitFactoryHandler}\r\n        onGetEquipmentTypeHandler={getEquipmentTypeHandler}\r\n        onGetReportTypeHandler={getReportTypeHandler}\r\n        getYearHandler={getYearHandler}\r\n        formSubmitted={formSubmitted}\r\n      />\r\n      <form onSubmit={submitFactoryHandler}>\r\n        <label htmlFor=\"cars\">Choose factory:</label>\r\n        <select\r\n          onChange={getEquipmentTypeHandler}\r\n          id=\"equipment\"\r\n          name=\"equipment\"\r\n        >\r\n          <option value=\"\">Select Equipment</option>\r\n          <option value=\"1\">Tires</option>\r\n          <option value=\"3\">Brake Hoses</option>\r\n          <option value=\"13\">Glazing</option>\r\n          <option value=\"16\">Retread</option>\r\n        </select>\r\n        <select onChange={getReportTypeHandler} id=\"cars\" name=\"cars\">\r\n          <option value=\"\">Select Report</option>\r\n          <option value=\"new\">New</option>\r\n          <option value=\"updated\">Updated</option>\r\n          <option value=\"closed\">Closed</option>\r\n          <option value=\"all\">All</option>\r\n        </select>\r\n        <select onChange={getYearHandler} id=\"years\" name=\"years\">\r\n          <option value=\"\">Select Year</option>\r\n          <option value=\"2012\">2012</option>\r\n          <option value=\"2013\">2013</option>\r\n          <option value=\"2014\">2014</option>\r\n          <option value=\"2015\">2015</option>\r\n        </select>\r\n        <button disabled={!formSubmitted}>Get a factory</button>\r\n      </form>\r\n\r\n      <div> {data && `Amount of factories found: ${data.Count}`}</div>\r\n\r\n      {data && (\r\n        <div>\r\n          <div className={styles.checkbox}>\r\n            <input type=\"radio\" name=\"sort\" id=\"name-sort\" defaultChecked />\r\n            <label\r\n              onClick={sortTypeHandler}\r\n              htmlFor=\"name-sort\"\r\n              className={styles[\"form-control\"]}\r\n            >\r\n              Sort by Name\r\n            </label>\r\n            <input type=\"radio\" name=\"sort\" id=\"city-sort\" />\r\n            <label\r\n              onClick={sortTypeHandler}\r\n              htmlFor=\"city-sort\"\r\n              className={styles[\"form-control\"]}\r\n            >\r\n              Sort by City\r\n            </label>\r\n            <button onClick={changeSortingHandler}>\r\n              Sort {isSortingAscending ? \"Asc...\" : \"Desc...\"}\r\n            </button>{\" \"}\r\n          </div>\r\n\r\n          {data && (\r\n            <select\r\n              onChange={specificCountryHandler}\r\n              id=\"country\"\r\n              name=\"country\"\r\n            >\r\n              <option value=\"\">--Select country--</option>\r\n              <option value=\"all\">All countries</option>\r\n              {optionMapList}\r\n            </select>\r\n          )}\r\n        </div>\r\n      )}\r\n      {data && (\r\n        <>\r\n          <input\r\n            type=\"search\"\r\n            onChange={searchHandler}\r\n            placeholder=\"Search a country/city/factory...\"\r\n            maxLength=\"15\"\r\n            disabled={!activateSearch}\r\n          />\r\n          <div className={styles[\"factory-list\"]}>{content}</div>\r\n        </>\r\n      )}\r\n      {showViewFactory && (\r\n        <ViewFactory\r\n          onCloseModal={closeViewFactoryHandler}\r\n          dataViewFactory={dataToViewFactory}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default FactorySearch;\r\n"]},"metadata":{},"sourceType":"module"}
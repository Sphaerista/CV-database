{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Win10\\\\Documents\\\\udemi-react\\\\14-react-portfolio-api\\\\src\\\\components\\\\Database\\\\FactorySearch.js\";\nimport React, { useState, useEffect } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { fetchFactoryForDatabase } from \"../../lib/api\";\nimport FactoryItem from \"./FactoryItem\";\nimport styles from \"./FactorySearch.module.css\";\nimport ViewFactory from \"./ViewFactory\";\n\nconst sortList = (items, descending, sortType) => {\n  return items.sort((itemA, itemB) => {\n    if (sortType) {\n      if (descending) {\n        return itemA.Name < itemB.Name ? 1 : -1;\n      } else {\n        return itemA.Name > itemB.Name ? 1 : -1;\n      }\n    } else {\n      if (descending) {\n        return itemA.City < itemB.City ? 1 : -1;\n      } else {\n        return itemA.City > itemB.City ? 1 : -1;\n      }\n    }\n  });\n};\n\nconst FactorySearch = () => {\n  // const history = useHistory();\n  const [sortingAsc, setSortingAsc] = useState(\"asc\");\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [activateSearch, setActivateSearch] = useState(false);\n  const [getEquipmentType, setGetEquipmentType] = useState(\"\");\n  const [getReportType, setGetReportType] = useState(\"\");\n  const [getYear, setGetYear] = useState(\"\");\n  const [specificCountryList, setSpecificCountryList] = useState([]);\n  const {\n    sendRequest,\n    status,\n    data,\n    error\n  } = useHttp(fetchFactoryForDatabase); //////////////// first-selection //////////////////////\n\n  const getEquipmentTypeHandler = e => {\n    e.preventDefault();\n    setGetEquipmentType(e.target.value);\n  };\n\n  const getReportTypeHandler = e => {\n    e.preventDefault();\n    setGetReportType(e.target.value);\n  };\n\n  const getYearHandler = e => {\n    e.preventDefault();\n    setGetYear(e.target.value);\n  };\n\n  const formSubmitted = getEquipmentType.length > 0 && getReportType.length > 0 && getYear.length > 0;\n\n  const submitFactoryHandler = e => {\n    e.preventDefault();\n    sendRequest({\n      equipmentType: getEquipmentType,\n      reportType: getReportType,\n      year: getYear\n    });\n    setSpecificCountryList([]);\n  }; //////////////// END-first-selection //////////////////////\n  //////////////// second-selection //////////////////////\n\n\n  let showFactoryByCountry = [];\n\n  const specificCountryHandler = e => {\n    let selectedCountry = e.target.value;\n    setActivateSearch(false); // history.push(`database?country=${selectedCountry}`);\n\n    showFactoryByCountry = data.Results.filter(datacountry => {\n      var _datacountry$Country;\n\n      if (((_datacountry$Country = datacountry.Country) === null || _datacountry$Country === void 0 ? void 0 : _datacountry$Country.toLowerCase()) === selectedCountry) {\n        showFactoryByCountry.push(datacountry);\n        setSpecificCountryList(showFactoryByCountry);\n        setActivateSearch(true);\n      }\n\n      if (selectedCountry === \"all\") {\n        setSpecificCountryList(data.Results);\n        setActivateSearch(true);\n      }\n\n      return null;\n    });\n  };\n\n  let mapCountries = data === null || data === void 0 ? void 0 : data.Results.map(data => {\n    var _data$Country;\n\n    return (_data$Country = data.Country) === null || _data$Country === void 0 ? void 0 : _data$Country.toLowerCase();\n  });\n  let uniqueCountriesList = [...new Set(mapCountries)];\n  let sortuniqueCountriesList = uniqueCountriesList.sort((a, b) => {\n    return a < b ? -1 : 1;\n  });\n  let optionMapList = sortuniqueCountriesList.map(country => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      value: country,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 12\n      }\n    }, country);\n  }); // console.log(specificCountryList);\n  //////////////// END-second-selection //////////////////////\n  //////////////// sorting-selection //////////////////////\n\n  const [isNameSort, setIsNameSort] = useState(true);\n\n  const sortTypeHandler = e => {\n    if (e.target.htmlFor === \"name-sort\") {\n      setIsNameSort(true);\n    }\n\n    if (e.target.htmlFor === \"city-sort\") {\n      setIsNameSort(false);\n    }\n  }; // const location = useLocation();\n  // const querParams = new URLSearchParams(location.search);\n  // const isSortingAscending = querParams.get(\"sort\") === \"desc\";\n\n\n  const isSortingAscending = sortingAsc === \"asc\";\n  const sortedList = sortList(specificCountryList, isSortingAscending, isNameSort);\n\n  const changeAscDescHandler = e => {\n    // history.push(\"database?sort=\" + (isSortingAscending ? \"asc\" : \"desc\"));\n    if (e.target.htmlFor === \"asc-sort\") {\n      setSortingAsc(\"desc\");\n    }\n\n    if (e.target.htmlFor === \"desc-sort\") {\n      setSortingAsc(\"asc\");\n    }\n  }; //////////////// END-sorting-selection //////////////////////\n  //////////////// factory-modal //////////////////////\n\n\n  const [showViewFactory, setShowViewFactory] = useState(false);\n  const [dataToViewFactory, setDataToViewFactory] = useState([]);\n\n  const closeViewFactoryHandler = () => {\n    setShowViewFactory(false);\n  };\n\n  const openViewFactoryHandler = () => {\n    setShowViewFactory(true);\n  };\n\n  const dataViewFactoryHandler = data => {\n    setDataToViewFactory(data);\n  }; //////////////// END-factory-modal //////////////////////\n  ///////////// final-third ///////////////////\n\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, \"No data\");\n  useEffect(() => {}, [data, content, sendRequest]);\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"centered focused\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 12\n      }\n    }, error);\n  }\n\n  if (status === \"completed\" && data) {\n    // setSpecificCountryList(data.Results);\n    content = sortedList.map(data => {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"focused\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }\n      }, data.Name), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }\n      }, data.Country, \" \"), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }\n      }, data.City));\n    });\n  }\n\n  if (specificCountryList.length > 0) {\n    content = sortedList.map(data => {\n      return /*#__PURE__*/React.createElement(FactoryItem, Object.assign({\n        key: data.DOTCode,\n        Name: data.Name,\n        Country: data.Country,\n        City: data.City\n      }, data, {\n        onOpenModal: openViewFactoryHandler,\n        onViewFactory: dataViewFactoryHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 9\n        }\n      }));\n    });\n  } ///////////// END-final-third ///////////////////\n  //////////////// search //////////////////\n\n\n  const searchHandler = e => {\n    setTimeout(() => {\n      setSearchInput(e.target.value);\n    }, 400);\n  };\n\n  const filteredInput = sortedList.filter(country => {\n    var _country$City;\n\n    return country.Country.toLowerCase().includes(searchInput.toLowerCase()) || ((_country$City = country.City) === null || _country$City === void 0 ? void 0 : _country$City.toLowerCase().includes(searchInput.toLowerCase())) || country.Name.toLowerCase().includes(searchInput.toLowerCase());\n  });\n\n  if (searchInput.length > 0) {\n    content = filteredInput.map(data => {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FactoryItem, Object.assign({\n        key: data.DOTCode,\n        Name: data.Name,\n        Country: data.Country,\n        City: data.City\n      }, data, {\n        onOpenModal: openViewFactoryHandler,\n        onViewFactory: dataViewFactoryHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }\n      })));\n    });\n  }\n\n  console.log(filteredInput.length); //////////////// END-search //////////////////\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"forForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitFactoryHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    onChange: getEquipmentTypeHandler,\n    id: \"equipment\",\n    name: \"equipment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }\n  }, \"Select Equipment\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }\n  }, \"Tires\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }\n  }, \"Brake Hoses\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"13\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }\n  }, \"Glazing\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"16\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }\n  }, \"Retread\")), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: getReportTypeHandler,\n    id: \"cars\",\n    name: \"cars\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }\n  }, \"Select Report\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"new\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  }, \"New\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"updated\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }\n  }, \"Updated\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"closed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }\n  }, \"Closed\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }\n  }, \"All\")), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: getYearHandler,\n    id: \"years\",\n    name: \"years\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }\n  }, \"Select Year\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"2012\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }\n  }, \"2012\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"2013\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }\n  }, \"2013\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"2014\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }\n  }, \"2014\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"2015\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }\n  }, \"2015\")), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !formSubmitted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 11\n    }\n  }, \"Get a factory\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.totalAmount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }\n  }, \" \", data && `Amount of factories type found: ${data.Count}`), data && /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.countryListHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    onChange: specificCountryHandler,\n    id: \"country\",\n    name: \"country\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 15\n    }\n  }, \"--Select country--\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 15\n    }\n  }, \"All countries\"), optionMapList)), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.spare,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.sortbox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"sort\",\n    id: \"city-sort\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    onClick: sortTypeHandler,\n    htmlFor: \"city-sort\",\n    className: styles[\"form-control\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 15\n    }\n  }, \"Sort by City\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"sort\",\n    id: \"name-sort\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    onClick: sortTypeHandler,\n    htmlFor: \"name-sort\",\n    className: styles[\"form-control\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 15\n    }\n  }, \"Sort by Name\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.sortbox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"sequence\",\n    id: \"asc-sort\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    onClick: changeAscDescHandler,\n    htmlFor: \"asc-sort\",\n    className: styles[\"form-control\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 15\n    }\n  }, \"Ascending\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"sequence\",\n    id: \"desc-sort\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    onClick: changeAscDescHandler,\n    htmlFor: \"desc-sort\",\n    className: styles[\"form-control\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 15\n    }\n  }, \"Descending\")))), data && /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.searchInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"search\",\n    onChange: searchHandler,\n    placeholder: \"Search a country/city/factory...\",\n    maxLength: \"15\",\n    disabled: !activateSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles[\"factory-list\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 11\n    }\n  }, content)), showViewFactory && /*#__PURE__*/React.createElement(ViewFactory, {\n    onCloseModal: closeViewFactoryHandler,\n    dataViewFactory: dataToViewFactory,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default FactorySearch;","map":{"version":3,"sources":["C:/Users/Win10/Documents/udemi-react/14-react-portfolio-api/src/components/Database/FactorySearch.js"],"names":["React","useState","useEffect","useHttp","fetchFactoryForDatabase","FactoryItem","styles","ViewFactory","sortList","items","descending","sortType","sort","itemA","itemB","Name","City","FactorySearch","sortingAsc","setSortingAsc","searchInput","setSearchInput","activateSearch","setActivateSearch","getEquipmentType","setGetEquipmentType","getReportType","setGetReportType","getYear","setGetYear","specificCountryList","setSpecificCountryList","sendRequest","status","data","error","getEquipmentTypeHandler","e","preventDefault","target","value","getReportTypeHandler","getYearHandler","formSubmitted","length","submitFactoryHandler","equipmentType","reportType","year","showFactoryByCountry","specificCountryHandler","selectedCountry","Results","filter","datacountry","Country","toLowerCase","push","mapCountries","map","uniqueCountriesList","Set","sortuniqueCountriesList","a","b","optionMapList","country","isNameSort","setIsNameSort","sortTypeHandler","htmlFor","isSortingAscending","sortedList","changeAscDescHandler","showViewFactory","setShowViewFactory","dataToViewFactory","setDataToViewFactory","closeViewFactoryHandler","openViewFactoryHandler","dataViewFactoryHandler","content","DOTCode","searchHandler","setTimeout","filteredInput","includes","console","log","totalAmount","Count","options","countryListHandler","spare","sortbox"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport useHttp from \"../../hooks/use-http\";\r\nimport { fetchFactoryForDatabase } from \"../../lib/api\";\r\nimport FactoryItem from \"./FactoryItem\";\r\nimport styles from \"./FactorySearch.module.css\";\r\nimport ViewFactory from \"./ViewFactory\";\r\n\r\nconst sortList = (items, descending, sortType) => {\r\n  return items.sort((itemA, itemB) => {\r\n    if (sortType) {\r\n      if (descending) {\r\n        return itemA.Name < itemB.Name ? 1 : -1;\r\n      } else {\r\n        return itemA.Name > itemB.Name ? 1 : -1;\r\n      }\r\n    } else {\r\n      if (descending) {\r\n        return itemA.City < itemB.City ? 1 : -1;\r\n      } else {\r\n        return itemA.City > itemB.City ? 1 : -1;\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nconst FactorySearch = () => {\r\n  // const history = useHistory();\r\n  const [sortingAsc, setSortingAsc] = useState(\"asc\");\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n  const [activateSearch, setActivateSearch] = useState(false);\r\n  const [getEquipmentType, setGetEquipmentType] = useState(\"\");\r\n  const [getReportType, setGetReportType] = useState(\"\");\r\n  const [getYear, setGetYear] = useState(\"\");\r\n  const [specificCountryList, setSpecificCountryList] = useState([]);\r\n  const { sendRequest, status, data, error } = useHttp(fetchFactoryForDatabase);\r\n\r\n  //////////////// first-selection //////////////////////\r\n  const getEquipmentTypeHandler = (e) => {\r\n    e.preventDefault();\r\n    setGetEquipmentType(e.target.value);\r\n  };\r\n  const getReportTypeHandler = (e) => {\r\n    e.preventDefault();\r\n    setGetReportType(e.target.value);\r\n  };\r\n  const getYearHandler = (e) => {\r\n    e.preventDefault();\r\n    setGetYear(e.target.value);\r\n  };\r\n\r\n  const formSubmitted =\r\n    getEquipmentType.length > 0 &&\r\n    getReportType.length > 0 &&\r\n    getYear.length > 0;\r\n\r\n  const submitFactoryHandler = (e) => {\r\n    e.preventDefault();\r\n    sendRequest({\r\n      equipmentType: getEquipmentType,\r\n      reportType: getReportType,\r\n      year: getYear,\r\n    });\r\n    setSpecificCountryList([]);\r\n  };\r\n  //////////////// END-first-selection //////////////////////\r\n\r\n  //////////////// second-selection //////////////////////\r\n  let showFactoryByCountry = [];\r\n  const specificCountryHandler = (e) => {\r\n    let selectedCountry = e.target.value;\r\n    setActivateSearch(false);\r\n    // history.push(`database?country=${selectedCountry}`);\r\n    showFactoryByCountry = data.Results.filter((datacountry) => {\r\n      if (datacountry.Country?.toLowerCase() === selectedCountry) {\r\n        showFactoryByCountry.push(datacountry);\r\n        setSpecificCountryList(showFactoryByCountry);\r\n        setActivateSearch(true);\r\n      }\r\n      if (selectedCountry === \"all\") {\r\n        setSpecificCountryList(data.Results);\r\n        setActivateSearch(true);\r\n      }\r\n      return null;\r\n    });\r\n  };\r\n\r\n  let mapCountries = data?.Results.map((data) => {\r\n    return data.Country?.toLowerCase();\r\n  });\r\n\r\n  let uniqueCountriesList = [...new Set(mapCountries)];\r\n  let sortuniqueCountriesList = uniqueCountriesList.sort((a, b) => {\r\n    return a < b ? -1 : 1;\r\n  });\r\n  let optionMapList = sortuniqueCountriesList.map((country) => {\r\n    return <option value={country}>{country}</option>;\r\n  });\r\n\r\n  // console.log(specificCountryList);\r\n  //////////////// END-second-selection //////////////////////\r\n\r\n  //////////////// sorting-selection //////////////////////\r\n  const [isNameSort, setIsNameSort] = useState(true);\r\n  const sortTypeHandler = (e) => {\r\n    if (e.target.htmlFor === \"name-sort\") {\r\n      setIsNameSort(true);\r\n    }\r\n    if (e.target.htmlFor === \"city-sort\") {\r\n      setIsNameSort(false);\r\n    }\r\n  };\r\n\r\n  // const location = useLocation();\r\n  // const querParams = new URLSearchParams(location.search);\r\n  // const isSortingAscending = querParams.get(\"sort\") === \"desc\";\r\n  const isSortingAscending = sortingAsc === \"asc\";\r\n  const sortedList = sortList(\r\n    specificCountryList,\r\n    isSortingAscending,\r\n    isNameSort\r\n  );\r\n\r\n  const changeAscDescHandler = (e) => {\r\n    // history.push(\"database?sort=\" + (isSortingAscending ? \"asc\" : \"desc\"));\r\n    if (e.target.htmlFor === \"asc-sort\") {\r\n      setSortingAsc(\"desc\");\r\n    }\r\n    if (e.target.htmlFor === \"desc-sort\") {\r\n      setSortingAsc(\"asc\");\r\n    }\r\n  };\r\n  //////////////// END-sorting-selection //////////////////////\r\n\r\n  //////////////// factory-modal //////////////////////\r\n  const [showViewFactory, setShowViewFactory] = useState(false);\r\n  const [dataToViewFactory, setDataToViewFactory] = useState([]);\r\n  const closeViewFactoryHandler = () => {\r\n    setShowViewFactory(false);\r\n  };\r\n  const openViewFactoryHandler = () => {\r\n    setShowViewFactory(true);\r\n  };\r\n  const dataViewFactoryHandler = (data) => {\r\n    setDataToViewFactory(data);\r\n  };\r\n  //////////////// END-factory-modal //////////////////////\r\n\r\n  ///////////// final-third ///////////////////\r\n  let content = <p>No data</p>;\r\n  useEffect(() => {}, [data, content, sendRequest]);\r\n  if (error) {\r\n    return <div className=\"centered focused\">{error}</div>;\r\n  }\r\n  if (status === \"completed\" && data) {\r\n    // setSpecificCountryList(data.Results);\r\n    content = sortedList.map((data) => {\r\n      return (\r\n        <>\r\n          <div className=\"focused\">{data.Name}</div>\r\n          <span>{data.Country} </span>\r\n          <span>{data.City}</span>\r\n        </>\r\n      );\r\n    });\r\n  }\r\n  if (specificCountryList.length > 0) {\r\n    content = sortedList.map((data) => {\r\n      return (\r\n        <FactoryItem\r\n          key={data.DOTCode}\r\n          Name={data.Name}\r\n          Country={data.Country}\r\n          City={data.City}\r\n          {...data}\r\n          onOpenModal={openViewFactoryHandler}\r\n          onViewFactory={dataViewFactoryHandler}\r\n        />\r\n      );\r\n    });\r\n  }\r\n  ///////////// END-final-third ///////////////////\r\n\r\n  //////////////// search //////////////////\r\n  const searchHandler = (e) => {\r\n    setTimeout(() => {\r\n      setSearchInput(e.target.value);\r\n    }, 400);\r\n  };\r\n  const filteredInput = sortedList.filter((country) => {\r\n    return (\r\n      country.Country.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n      country.City?.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n      country.Name.toLowerCase().includes(searchInput.toLowerCase())\r\n    );\r\n  });\r\n  if (searchInput.length > 0) {\r\n    content = filteredInput.map((data) => {\r\n      return (\r\n        <>\r\n          <FactoryItem\r\n            key={data.DOTCode}\r\n            Name={data.Name}\r\n            Country={data.Country}\r\n            City={data.City}\r\n            {...data}\r\n            onOpenModal={openViewFactoryHandler}\r\n            onViewFactory={dataViewFactoryHandler}\r\n          />\r\n        </>\r\n      );\r\n    });\r\n  }\r\n  console.log(filteredInput.length);\r\n  //////////////// END-search //////////////////\r\n\r\n  return (\r\n    <>\r\n      <div className=\"forForm\">\r\n        <form onSubmit={submitFactoryHandler}>\r\n          <select\r\n            onChange={getEquipmentTypeHandler}\r\n            id=\"equipment\"\r\n            name=\"equipment\"\r\n          >\r\n            <option value=\"\">Select Equipment</option>\r\n            <option value=\"1\">Tires</option>\r\n            <option value=\"3\">Brake Hoses</option>\r\n            <option value=\"13\">Glazing</option>\r\n            <option value=\"16\">Retread</option>\r\n          </select>\r\n          <select onChange={getReportTypeHandler} id=\"cars\" name=\"cars\">\r\n            <option value=\"\">Select Report</option>\r\n            <option value=\"new\">New</option>\r\n            <option value=\"updated\">Updated</option>\r\n            <option value=\"closed\">Closed</option>\r\n            <option value=\"all\">All</option>\r\n          </select>\r\n          <select onChange={getYearHandler} id=\"years\" name=\"years\">\r\n            <option value=\"\">Select Year</option>\r\n            <option value=\"2012\">2012</option>\r\n            <option value=\"2013\">2013</option>\r\n            <option value=\"2014\">2014</option>\r\n            <option value=\"2015\">2015</option>\r\n          </select>\r\n          <button disabled={!formSubmitted}>Get a factory</button>\r\n        </form>\r\n      </div>\r\n      <div className={styles.totalAmount}>\r\n        {\" \"}\r\n        {data && `Amount of factories type found: ${data.Count}`}\r\n      </div>\r\n      {data && (\r\n        <div className={styles.options}>\r\n          <div className={styles.countryListHandler}>\r\n            <select\r\n              onChange={specificCountryHandler}\r\n              id=\"country\"\r\n              name=\"country\"\r\n            >\r\n              <option value=\"\">--Select country--</option>\r\n              <option value=\"all\">All countries</option>\r\n              {optionMapList}\r\n            </select>\r\n          </div>\r\n          <div className={styles.spare}>\r\n            <div className={styles.sortbox}>\r\n              <input type=\"radio\" name=\"sort\" id=\"city-sort\" />\r\n              <label\r\n                onClick={sortTypeHandler}\r\n                htmlFor=\"city-sort\"\r\n                className={styles[\"form-control\"]}\r\n              >\r\n                Sort by City\r\n              </label>\r\n              <input type=\"radio\" name=\"sort\" id=\"name-sort\" />\r\n              <label\r\n                onClick={sortTypeHandler}\r\n                htmlFor=\"name-sort\"\r\n                className={styles[\"form-control\"]}\r\n              >\r\n                Sort by Name\r\n              </label>\r\n            </div>\r\n            <div className={styles.sortbox}>\r\n              <input type=\"radio\" name=\"sequence\" id=\"asc-sort\" />\r\n              <label\r\n                onClick={changeAscDescHandler}\r\n                htmlFor=\"asc-sort\"\r\n                className={styles[\"form-control\"]}\r\n              >\r\n                Ascending\r\n              </label>\r\n              <input type=\"radio\" name=\"sequence\" id=\"desc-sort\" />\r\n              <label\r\n                onClick={changeAscDescHandler}\r\n                htmlFor=\"desc-sort\"\r\n                className={styles[\"form-control\"]}\r\n              >\r\n                Descending\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {data && (\r\n        <div className={styles.searchInput}>\r\n          <input\r\n            type=\"search\"\r\n            onChange={searchHandler}\r\n            placeholder=\"Search a country/city/factory...\"\r\n            maxLength=\"15\"\r\n            disabled={!activateSearch}\r\n          />\r\n          <div className={styles[\"factory-list\"]}>{content}</div>\r\n        </div>\r\n      )}\r\n      {showViewFactory && (\r\n        <ViewFactory\r\n          onCloseModal={closeViewFactoryHandler}\r\n          dataViewFactory={dataToViewFactory}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default FactorySearch;\r\n"]},"metadata":{},"sourceType":"module"}